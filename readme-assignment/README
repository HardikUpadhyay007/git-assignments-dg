# country-capital-api

## Overview

`country-capital-api` is a RESTful microservice built with Python and Flask. It provides an API endpoint that returns the country name when given a capital city. The service is designed for easy integration into other projects and is served using Uvicorn (ASGI server) for high performance.

## Features

- **GET endpoint** to retrieve country by capital city.
- **Fast and scalable**: Uses Uvicorn for ASGI compatibility.
- **Easy integration**: Microservice endpoint available for organization-wide use.
- **Extensible**: Easily add more cities/countries or endpoints.

## Microservice Endpoint


https://example.com/country-capital?city=<capital-city>

- Replace <capital-city> with the name of the capital you want to query.
- Example:  
  https://example.com/country-capital?city=Paris

## API Reference

### `GET /country-capital`

**Query Parameters:**
- city (string, required): The name of the capital city.

**Response:**
- `200 OK`  
  ```json
  {
    "country": "France"
  }
  ```
- `404 Not Found`  
  ```json
  {
    "error": "City not found"
  }
  ```

---

## Prerequisites

- Python 3.8+
- pip
- Git
- Internet connection (for dependency installation)

## Local Development Setup

1. **Clone the repository**
   git clone https://github.com/your-org/country-capital-api.git
   cd country-capital-api
   

2. **Create and activate a virtual environment**
   python -m venv venv
   # Windows:
   venv\Scripts\activate
  

3. **Install dependencies**
   pip install -r requirements.txt
   

4. **Run the API locally**
   uvicorn app:app --reload
   The API will be available at `http://127.0.0.1:8000/`.


## Example Usage

### Using `curl`
curl "http://127.0.0.1:8000/country-capital?city=Berlin"

### Using Python
import requests

response = requests.get("http://127.0.0.1:8000/country-capital", params={"city": "Berlin"})
print(response.json())



## Deployment

- **Production**: Use a process manager (e.g., Gunicorn) and configure Uvicorn with multiple workers.
- **Environment variables**: Configure host, port, and debug settings as needed.
- **Containerization**: A sample `Dockerfile` is provided for container deployments.

---

## Contributing

1. Fork the repository.
2. Create your feature branch (`git checkout -b feature/my-feature`).
3. Commit your changes (`git commit -am 'Add new feature'`).
4. Push to the branch (`git push origin feature/my-feature`).
5. Open a pull request.


## License

This project is licensed under the MIT License. See the `LICENSE` file for details.

## Support & Contact

For questions, issues, or feature requests, please open an issue on GitHub or contact the maintainer at [your-email@example.com].

- [Git Documentation](https://git-scm.com/doc)
-
